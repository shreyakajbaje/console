---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dex
  name: dex
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dex
  template:
    metadata:
      labels:
        app: dex
    spec:
      serviceAccountName: dex # This is created above
      containers:
      - image: ghcr.io/dexidp/dex:v2.32.0
        name: dex
        command: ["/usr/local/bin/dex", "serve", "/etc/dex/cfg/config.yaml"]

        ports:
        - name: http
          containerPort: 5556

        volumeMounts:
        - name: config
          mountPath: /etc/dex/cfg
        #- name: tls
        #  mountPath: /etc/dex/tls

        env:
        - name: OPENSHIFT_OAUTH_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: console-dex-secrets
              key: DEX_CLIENT_ID
        - name: OPENSHIFT_OAUTH_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: console-dex-secrets
              key: DEX_CLIENT_SECRET

        readinessProbe:
          httpGet:
            path: /healthz
            port: 5556
            scheme: HTTP
      volumes:
      - name: config
        configMap:
          name: dex
          items:
          - key: config.yaml
            path: config.yaml
      #- name: tls
      #  secret:
      #    secretName: dex.example.com.tls
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: dex
data:
  config.yaml: |
    issuer: http://console-dex.${CLUSTER_DOMAIN}
    storage:
      type: kubernetes
      config:
        inCluster: true
    web:
      http: 0.0.0.0:5556
      #tlsCert: /etc/dex/tls/tls.crt
      #tlsKey: /etc/dex/tls/tls.key
    connectors:
    - type: openshift
      # Required field for connector id.
      id: openshift
      # Required field for connector name.
      name: OpenShift
      config:
        # OpenShift API
        issuer: https://api.crc.testing:6443
        # Credentials can be string literals or pulled from the environment.
        clientID: $$OPENSHIFT_OAUTH_CLIENT_ID
        clientSecret: $$OPENSHIFT_OAUTH_CLIENT_SECRET
        redirectURI: http://console-dex.${CLUSTER_DOMAIN}/callback
        # Optional: Specify whether to communicate to OpenShift without validating SSL certificates
        insecureCA: true
        # Optional: The location of file containing SSL certificates to communicate to OpenShift
        #rootCA: /etc/ssl/openshift.pem
        # Optional list of required groups a user must be a member of
        groups:
          - users
          - example
    oauth2:
      skipApprovalScreen: true

    staticClients:
    - id: example-app
      redirectURIs:
      - 'http://127.0.0.1:5555/callback'
      - 'http://localhost:3000/api/auth/callback/oidc'
      name: 'Example App'
      secret: ZXhhbXBsZS1hcHAtc2VjcmV0

    enablePasswordDB: true
    staticPasswords:
    - email: "admin@example.com"
      # bcrypt hash of the string "password": $(echo password | htpasswd -BinC 10 admin | cut -d: -f2)
      hash: "$$2a$$10$$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"
      username: "admin"
      userID: "08a8684b-db88-4b73-90a9-3cd1661f5466"
---
apiVersion: v1
kind: Service
metadata:
  name: dex
spec:
  type: NodePort
  ports:
  - name: dex
    port: 5556
    protocol: TCP
    targetPort: 5556
    nodePort: 32000
  selector:
    app: dex
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: console-dex-ingress
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    route.openshift.io/termination: none
spec:
  defaultBackend:
    service:
      name: dex
      port:
        number: 5556
  rules:
    - host: console-dex.apps-crc.testing
      http:
        paths:
          - pathType: ImplementationSpecific
            backend:
              service:
                name: dex
                port:
                  number: 5556
